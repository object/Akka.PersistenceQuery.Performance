<?xml version="1.0" encoding="utf-8"?>
<configuration>

  <configSections>
    <sectionGroup name="akka">
      <section name="akka.actor" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka"/>
      <section name="akka.persistence" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka"/>
      <section name="akka.logging" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka"/>
      <section name="akka.connectionStrings" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka"/>
    </sectionGroup>
  </configSections>

  <connectionStrings>
    <add name="Elasticsearch" connectionString="http://maodalog01:9200"  />
    <add name="Akka" connectionString="Server=.;Database=Odd.Integration;Trusted_Connection=True;"  />
  </connectionStrings>

  <akka>
    <akka.actor>
      <hocon>
        <![CDATA[
          akka {                
            actor {
              provider = "Akka.Actor.LocalActorRefProvider"
              serializers {
                 wire = "Akka.Serialization.WireSerializer, Akka.Serialization.Wire"
                 json = "Akka.Serialization.NewtonSoftJsonSerializer"
              }
              serialization-bindings {
                "System.Object" = wire
                "Newtonsoft.Json.Linq.JObject, Newtonsoft.Json" = json
              }       
              debug {
                receive = off # log any received message
                autoreceive= off # log automatically received messages, e.g. PoisonPill
                lifecycle = off # log actor lifecycle changes
                fsm = off # log all LoggingFSMs for events, transitions and timers
                event-stream = off # log subscription changes for Akka.NET event stream
                unhandled = on # log unhandled messages sent to actors
              }
            }
          }
      ]]>
      </hocon>
    </akka.actor>

    <akka.persistence>
      <hocon>
        <![CDATA[
          akka {                
            persistence{
              journal {
                plugin = "akka.persistence.journal.sql-server"
                sql-server {
                  class = "Akka.Persistence.SqlServer.Journal.SqlServerJournal, Akka.Persistence.SqlServer"
                  schema-name = dbo
                  auto-initialize = off
                  event-adapters {
                    akamai-disk-volume = "PersistenceQueryTest.Utils+EventAdapter`1[[PersistenceQueryTest.PersistentTypes+AkamaiDiskUsage, PersistenceQueryTest]], PersistenceQueryTest"
                    akamai-storage-assignment = "PersistenceQueryTest.Utils+EventAdapter`1[[PersistenceQueryTest.PersistentTypes+AkamaiStorageAssignment, PersistenceQueryTest]], PersistenceQueryTest"
                    origin-storage-assignment = "PersistenceQueryTest.Utils+EventAdapter`1[[PersistenceQueryTest.PersistentTypes+OriginStorageAssignment, PersistenceQueryTest]], PersistenceQueryTest"
                    file-distribution = "PersistenceQueryTest.Utils+EventAdapter`1[[PersistenceQueryTest.PersistentTypes+FileDistribution, PersistenceQueryTest]], PersistenceQueryTest"
                  }
                  event-adapter-bindings {
                    # to journal
                    "PersistenceQueryTest.PersistentTypes+AkamaiDiskUsage, PersistenceQueryTest" = akamai-disk-volume
                    "PersistenceQueryTest.PersistentTypes+AkamaiStorageAssignment, PersistenceQueryTest" = akamai-storage-assignment
                    "PersistenceQueryTest.PersistentTypes+OriginStorageAssignment, PersistenceQueryTest" = origin-storage-assignment
                    "PersistenceQueryTest.PersistentTypes+FileDistribution, PersistenceQueryTest" = file-distribution
                    # from journal
                    "Newtonsoft.Json.Linq.JObject, Newtonsoft.Json" = [akamai-disk-volume,akamai-storage-assignment,origin-storage-assignment,file-distribution]
                  }
                }
              } 
              snapshot-store{
                plugin = "akka.persistence.snapshot-store.sql-server"
                sql-server {
                  class = "Akka.Persistence.SqlServer.Snapshot.SqlServerSnapshotStore, Akka.Persistence.SqlServer"
                  schema-name = dbo
                  auto-initialize = off
                }
              }
            } 
          }
      ]]>
      </hocon>
    </akka.persistence>

    <akka.logging>
      <hocon>
        <![CDATA[
          akka {
            stdout-loglevel = ERROR
            loglevel = ERROR
            log-config-on-start = off
          }
      ]]>
      </hocon>
    </akka.logging>

    <akka.connectionStrings>
      <hocon>
        <![CDATA[
          akka.persistence.journal.sql-server {
            connection-string = "Server=.;Database=Odd.Integration;Trusted_Connection=True;"
          }
          akka.persistence.snapshot-store.sql-server {
            connection-string = "Server=.;Database=Odd.Integration;Trusted_Connection=True;"
          }
      ]]>
      </hocon>
    </akka.connectionStrings>
  </akka>

  <runtime>

    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="FSharp.Core" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="4.3.0.0" newVersion="4.3.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-9.0.0.0" newVersion="9.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="1.0.27.0-1.1.65535.65535" newVersion="1.1.37.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2" />
  </startup>
</configuration>